Q6. Write a program to simulate CPU Scheduling Algorithms: SJF (Preemptive).

import java.util.ArrayList;
import java.util.Scanner;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnaroundTime;

    public Process(int processId, int arrivalTime, int burstTime) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.remainingTime = burstTime; // Remaining time initialized to burst time
    }
}

public class SJFPreemptiveScheduling {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        ArrayList<Process> processes = new ArrayList<>();

        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter arrival time for Process " + (i + 1) + ": ");
            int arrivalTime = scanner.nextInt();
            System.out.print("Enter burst time for Process " + (i + 1) + ": ");
            int burstTime = scanner.nextInt();
            processes.add(new Process(i + 1, arrivalTime, burstTime));
        }

        // Run SJF Preemptive Scheduling
        simulateSJFPreemptive(processes);

        // Display process information
        System.out.println("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time");
        for (Process process : processes) {
            System.out.printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
                process.processId, process.arrivalTime, process.burstTime, 
                process.completionTime, process.waitingTime, process.turnaroundTime);
        }

        // Calculate and display average waiting and turnaround times
        double totalWaitingTime = 0;
        double totalTurnaroundTime = 0;
        for (Process process : processes) {
            totalWaitingTime += process.waitingTime;
            totalTurnaroundTime += process.turnaroundTime;
        }

        System.out.printf("\nAverage Waiting Time: %.2f", (totalWaitingTime / numProcesses));
        System.out.printf("\nAverage Turnaround Time: %.2f", (totalTurnaroundTime / numProcesses));

        scanner.close();
    }

    public static void simulateSJFPreemptive(ArrayList<Process> processes) {
        int currentTime = 0;
        int completed = 0;
        int n = processes.size();

        while (completed != n) {
            // Find the process with the shortest remaining time at the current time
            Process shortestJob = null;
            for (Process process : processes) {
                if (process.arrivalTime <= currentTime && process.remainingTime > 0) {
                    if (shortestJob == null || process.remainingTime < shortestJob.remainingTime) {
                        shortestJob = process;
                    }
                }
            }

            if (shortestJob == null) {
                currentTime++;
            } else {
                // Execute the process with the shortest remaining time for 1 unit
                shortestJob.remainingTime--;
                currentTime++;

                // If the process is completed
                if (shortestJob.remainingTime == 0) {
                    completed++;
                    shortestJob.completionTime = currentTime;
                    shortestJob.turnaroundTime = shortestJob.completionTime - shortestJob.arrivalTime;
                    shortestJob.waitingTime = shortestJob.turnaroundTime - shortestJob.burstTime;
                }
            }
        }
    }
}
