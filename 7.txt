Q7. Write a program to simulate CPU Scheduling Algorithms: Priority (Non-Preemptive)



import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

class Process {
    int processId;
    int arrivalTime;
    int burstTime;
    int priority;
    int completionTime;
    int waitingTime;
    int turnaroundTime;

    public Process(int processId, int arrivalTime, int burstTime, int priority) {
        this.processId = processId;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
    }
}

public class PriorityNonPreemptiveScheduling {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int numProcesses = scanner.nextInt();

        ArrayList<Process> processes = new ArrayList<>();

        for (int i = 0; i < numProcesses; i++) {
            System.out.print("Enter arrival time for Process " + (i + 1) + ": ");
            int arrivalTime = scanner.nextInt();
            System.out.print("Enter burst time for Process " + (i + 1) + ": ");
            int burstTime = scanner.nextInt();
            System.out.print("Enter priority for Process " + (i + 1) + ": ");
            int priority = scanner.nextInt();
            processes.add(new Process(i + 1, arrivalTime, burstTime, priority));
        }

        // Run Priority Scheduling (Non-Preemptive)
        simulatePriorityNonPreemptive(processes);

        // Display process information
        System.out.println("\nProcess\tArrival Time\tBurst Time\tPriority\tCompletion Time\tWaiting Time\tTurnaround Time");
        for (Process process : processes) {
            System.out.printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
                process.processId, process.arrivalTime, process.burstTime, process.priority,
                process.completionTime, process.waitingTime, process.turnaroundTime);
        }

        // Calculate and display average waiting and turnaround times
        double totalWaitingTime = 0;
        double totalTurnaroundTime = 0;
        for (Process process : processes) {
            totalWaitingTime += process.waitingTime;
            totalTurnaroundTime += process.turnaroundTime;
        }

        System.out.printf("\nAverage Waiting Time: %.2f", (totalWaitingTime / numProcesses));
        System.out.printf("\nAverage Turnaround Time: %.2f", (totalTurnaroundTime / numProcesses));

        scanner.close();
    }

    public static void simulatePriorityNonPreemptive(ArrayList<Process> processes) {
        int currentTime = 0;
        int completed = 0;
        int n = processes.size();

        while (completed != n) {
            // Find the process with the highest priority (lowest priority value) that has arrived and is not completed
            Process highestPriorityProcess = null;
            for (Process process : processes) {
                if (process.arrivalTime <= currentTime && process.completionTime == 0) {
                    if (highestPriorityProcess == null || process.priority < highestPriorityProcess.priority) {
                        highestPriorityProcess = process;
                    }
                }
            }

            if (highestPriorityProcess == null) {
                currentTime++;
            } else {
                // Process the selected process
                currentTime += highestPriorityProcess.burstTime;
                highestPriorityProcess.completionTime = currentTime;
                highestPriorityProcess.turnaroundTime = highestPriorityProcess.completionTime - highestPriorityProcess.arrivalTime;
                highestPriorityProcess.waitingTime = highestPriorityProcess.turnaroundTime - highestPriorityProcess.burstTime;
                completed++;
            }
        }
    }
}
